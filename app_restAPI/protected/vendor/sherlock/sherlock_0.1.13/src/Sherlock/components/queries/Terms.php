<?php
/**
 * User: Zachary Tong
 * Date: 2013-02-16
 * Time: 09:24 PM
 * Auto-generated by "generate.php"
 * @package Sherlock\components\queries
 */
namespace Sherlock\components\queries;

use Sherlock\components;
use Sherlock\components\QueryInterface;

/**
 * Class Terms
 * @package Sherlock\components\queries
 */
class Terms extends components\BaseComponent implements QueryInterface
{

    /**
     * @param string $value
     *
     * @return $this
     */
    public function field($value)
    {
        $this->params['field'] = $value;
        return $this;
    }

    /**
     * @param int $value
     *
     * @return $this
     */
    public function minimum_match($value)
    {
        $this->params['minimum_match'] = $value;
        return $this;
    }

    /**
     * @param  \string | array $terms,...
     *
     * @return Terms
     */
    public function terms($terms)
    {

        $args = $this->normalizeFuncArgs(func_get_args());

        foreach ($args as $arg) {
            if (is_string($arg)) {
                $this->params['terms'][] = $arg;
            }
        }

        return $this;
    }


    /**
     * @return array
     */
    public function toArray()
    {
        $ret = array(
            'terms' =>
            array($this->params["field"] => $this->params["terms"]),
        );

        // Doing this manually (instead of convertParams) because it is simpler given
        // the structure of Terms.
        if (isset($this->params['minimum_match']) === true) {
            $ret['terms']['minimum_match'] = $this->params["minimum_match"];
        }

        return $ret;
    }

}
