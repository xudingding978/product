<?php
/**
 * User: Zachary Tong
 * Date: 2/17/13
 * Time: 7:34 PM
 */

namespace Sherlock\tests;
use Sherlock;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-02-07 at 03:12:53.
 */
class IndexingTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \Sherlock\sherlock
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Sherlock\Sherlock();
        $this->object->addNode('localhost', '9200');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        try {
            $this->object->index('testindexing')->delete();
        } catch (\Exception $e) {

        }
    }

    public function assertThrowsException($exception_name, $code)
    {
        $e = null;
        try {
            $code();
        } catch (\Exception $e) {
            // No more code, we only want to catch the exception in $e
        }

        $this->assertInstanceOf($exception_name, $e);
    }

    public function testAddDoc()
    {
         $sherlock = $this->object;

        $doc = $sherlock->document()->index('testindexing')->type('tweet')->document(array("field" => "test"));
        $response = $doc->execute();

        $this->assertInstanceOf('\Sherlock\responses\IndexResponse', $response[0]);
        $this->assertEquals(true, $response[0]->ok);

    }

    public function testUpdateDoc()
    {
        $sherlock = $this->object;

        //First insert a doc with a PUT
        $doc = $sherlock->document()->index('testindexing')->type('tweet')->document(array("field" => "test"), 123);
        $response = $doc->execute();

        $this->assertInstanceOf('\Sherlock\responses\IndexResponse', $response[0]);
        $this->assertEquals(true, $response[0]->ok);

        $version = $response[0]->responseData['_version'];

        //Then insert it again.
        $doc = $sherlock->document()->index('testindexing')->type('tweet')->document(array("field" => "test"), 123);
        $response = $doc->execute();

        $this->assertInstanceOf('\Sherlock\responses\IndexResponse', $response[0]);
        $this->assertEquals(true, $response[0]->ok);

        $version2 = $response[0]->responseData['_version'];

        //make sure the new version is exactly one higher.
        $this->assertEquals($version + 1, $version2);

    }

    public function testUpdateDocPartial()
    {
        $sherlock = $this->object;

        //First insert a doc with a PUT
        $doc = $sherlock->document()->index('testindexing')->type('tweet')->document(array("field" => "test"), 456);
        $response = $doc->execute();

        $this->assertInstanceOf('\Sherlock\responses\IndexResponse', $response[0]);
        $this->assertEquals(true, $response[0]->ok);

        $version = $response[0]->responseData['_version'];

        //Then update with a partial
        $doc = $sherlock->document()->index('testindexing')->type('tweet')->document(array("field2" => "test2"), 456, true);
        $response = $doc->execute();


        $this->assertInstanceOf('\Sherlock\responses\IndexResponse', $response[0]);
        $this->assertEquals(true, $response[0]->ok);

        $version2 = $response[0]->responseData['_version'];

        //make sure the new version is exactly one higher.
        $this->assertEquals($version + 1, $version2);
    }

    public function testUpdateDocScript()
    {
        $sherlock = $this->object;

        //First insert a doc with a PUT
        $doc = $sherlock->document()->index('testindexing')->type('tweet')->document(array("field" => "test"), 789);
        $response = $doc->execute();

        $this->assertInstanceOf('\Sherlock\responses\IndexResponse', $response[0]);
        $this->assertEquals(true, $response[0]->ok);

        $version = $response[0]->responseData['_version'];

        //Then update with a script
        $doc = $sherlock->document()->index('testindexing')->type('tweet')->document(null,789,true)->updateScript('ctx._source.field += tag')->updateParams(array("tag" => 'blue'));
        $response = $doc->execute();

        $this->assertInstanceOf('\Sherlock\responses\IndexResponse', $response[0]);
        $this->assertEquals(true, $response[0]->ok);

        $version2 = $response[0]->responseData['_version'];

        //make sure the new version is exactly one higher.
        $this->assertEquals($version + 1, $version2);
    }


    public function testAddBatchDoc()
    {
        $sherlock = $this->object;

        $doc = $sherlock->document()->index('testindexing')->type('tweet');

        for ($i = 0; $i < 2000; $i++) {
            $doc->document('{"field":"test"}');
        }

        $response = $doc->execute();

        $this->assertInstanceOf('\Sherlock\responses\IndexResponse', $response[0]);
        $this->assertEquals(true, $response[0]->ok);


    }

    public function testAddBatchCommand()
    {

        $sherlock = $this->object;

        $batch = array();
        for ($i = 0; $i < 2000; $i++) {
            $tDoc = new Sherlock\requests\Command();
            $tDoc->action('post')
                ->index('testindexing')
                ->type('tweet')
                ->data('{"field":"test"}');

            $batch[] = $tDoc;
        }

        for ($i = 0; $i < 2000; $i++) {
            $tDoc = new Sherlock\requests\Command();
            $tDoc->action('put')
                ->index('testindexing')
                ->type('tweet')
                ->data('{"field":"test"}')
                ->id($i);

            $batch[] = $tDoc;
        }

        $batchDocs = $sherlock->document();
        $response = $batchDocs->documents($batch)->execute();

        $this->assertInstanceOf('\Sherlock\responses\IndexResponse', $response[0]);
        $this->assertEquals(true, $response[0]->ok);
    }

    public function testAddBatchIterator()
    {
        $sherlock = $this->object;

        $batch = new CustomBatch();
        $batchDocs = $sherlock->document();

        $response = $batchDocs->documents($batch)->execute();

        $this->assertInstanceOf('\Sherlock\responses\IndexResponse', $response[0]);
        $this->assertEquals(true, $response[0]->ok);
    }

}

/**
 * Class CustomBatch
 * @package Sherlock\tests
 */
class CustomBatch implements Sherlock\requests\BatchCommandInterface
{
    private $commands = array();

    /**
     * Pregenerate 2000 docs to insert, just as a demonstration
     * This could easily be opening a filestream, etc
     */
    public function __construct()
    {

        for ($i = 0; $i < 2000; $i++) {
            $tDoc = new Sherlock\requests\Command();
            $tDoc->action('post')
                ->index('testindexing')
                ->type('tweet')
                ->data('{"field":"test"}');

            $this->commands[] = $tDoc;
        }
    }

    /**
     *
     */
    public function rewind()
    {
        reset($this->commands);
    }

    /**
     * @return Command
     */
    public function current()
    {
        return current($this->commands);
    }

    /**
     * @return mixed
     */
    public function key()
    {
        return key($this->commands);
    }

    /**
     * @return Command|void
     */
    public function next()
    {
        return next($this->commands);
    }

    /**
     * @return bool
     */
    public function valid()
    {
        return false !== current($this->commands);
    }
}
