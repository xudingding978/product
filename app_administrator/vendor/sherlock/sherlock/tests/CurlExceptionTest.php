<?php
/**
 * User: zach
 * Date: 3/23/13
 * Time: 7:11 PM
 */


namespace Sherlock\tests;

use Sherlock;
use Sherlock\common\exceptions;


/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-02-07 at 03:12:53.
 */
class CurlExceptionTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \Sherlock\sherlock
     */
    protected $object;


    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Sherlock\Sherlock();
        $this->object->addNode('localhost', '9200');
    }


    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }


    public function assertThrowsException($exception_name, $code)
    {
        $e = null;
        try {
            $code();
        } catch (\Exception $e) {
            // No more code, we only want to catch the exception in $e
        }

        $this->assertInstanceOf($exception_name, $e);
    }


    public function testIndexMissing()
    {
        $sherlock = $this->object;

        $index = $sherlock->index('idonotexist');

        $this->assertThrowsException(
            '\Sherlock\common\exceptions\IndexMissingException',
            function () use ($index) {
                $index->delete();
            }
        );
    }


    public function testIndexExists()
    {
        $sherlock = $this->object;

        $index = $sherlock->index('idoexist');

        //delete, just in case...
        try {
            $index->delete();
        } catch (exceptions\IndexMissingException $e) {
            //ignore
        }

        $index->create();

        $this->assertThrowsException(
            '\Sherlock\common\exceptions\IndexAlreadyExistsException',
            function () use ($index) {
                $index->create();
            }
        );

        //delete, just in case...
        try {
            $index->delete();
        } catch (exceptions\IndexMissingException $e) {
            //ignore
        }
    }


    public function testIllegalJson()
    {
        $sherlock = $this->object;
        $req      = $this->object->search();
        $req->index("testqueries")->type("test");

        $query = Sherlock\Sherlock::queryBuilder()->Raw('Illegal JSON');

        $req->query($query);

        $this->assertThrowsException(
            '\Sherlock\common\exceptions\SearchPhaseExecutionException',
            function () use ($req) {
                $req->execute();
            }
        );

    }
}
