<?php
/**
 * User: Zachary Tong
 * Date: 2013-02-19
 * Time: 08:26 PM
 * Auto-generated by "generate.filters.php"
 * @package Sherlock\components\filters
 */
namespace Sherlock\components\filters;

use Sherlock\components;

/**
 * Class OrFilter
 * @package Sherlock\components\filters
 *
 * @method \Sherlock\components\filters\OrFilter _cache() _cache(\bool $value) Default: false
 */
class OrFilter extends \Sherlock\components\BaseComponent implements \Sherlock\components\FilterInterface
{
    /**
     * @param null|array $hashMap
     */
    public function __construct($hashMap = null)
    {
        $this->params['_cache'] = false;

        parent::__construct($hashMap);
    }


    /**
     * @param  \Sherlock\components\QueryInterface | \Sherlock\components\QueryInterface | array $values,... - one or more Queries can be specified individually, or an array of filters
     *
     * @return OrFilter
     */
    public function queries($values)
    {

        $args = func_get_args();

        //single param, array of queries\filters
        if (count($args) == 1 && is_array($args[0])) {
            $args = $args[0];
        }

        foreach ($args as $arg) {
            if ($arg instanceof \Sherlock\components\QueryInterface) {
                $this->params['queries'][] = $arg->toArray();
            } elseif ($arg instanceof \Sherlock\components\FilterInterface) {
                $this->params['queries'][] = $arg->toArray();
            }
        }

        return $this;
    }


    /**
     * @return array
     */
    public function toArray()
    {
        $ret = array(
            'or' => array(
                'filters' => $this->params["queries"],
                '_cache'  => $this->params["_cache"],
            ),
        );

        return $ret;
    }

}
