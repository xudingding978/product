<?php
/**
 * User: Zachary Tong
 * Date: 2013-02-16
 * Time: 09:24 PM
 * Auto-generated by "generate.php"
 * @package Sherlock\components\queries
 */
namespace Sherlock\components\queries;

use Sherlock\common\exceptions\InvalidArgumentException;
use Sherlock\components;
use Sherlock\components\QueryInterface;

/**
 * Class CustomFiltersScore
 * @package Sherlock\components\queries
 */
class CustomFiltersScore extends components\BaseComponent implements QueryInterface
{
    /**
     * @param QueryInterface $value
     *
     * @return $this
     */
    public function query(QueryInterface $value)
    {
        $this->params['query'] = $value->toArray();
        return $this;
    }


    /**
     * @param string $value
     *
     * @return $this
     */
    public function score_mode($value)
    {
        $this->params['score_mode'] = $value;
        return $this;
    }


    /**
     * @param float $value
     *
     * @return $this
     */
    public function max_boost($value)
    {
        $this->params['max_boost'] = $value;
        return $this;
    }

    /**
     * @param \Sherlock\components\FilterInterface[]
     *
     * @return CustomFiltersScore
     */
    public function filters($filter)
    {
        $args = func_get_args();

        foreach ($args as $arg) {
            $this->parseFiltersArray($arg);
        }

        return $this;
    }


    /**
     * @param $arg
     */
    private function parseFiltersArray($arg)
    {
        if (isset($arg['filter']) === true && isset($arg['boost']) === true) {
            $this->filter($arg['filter'], $arg['boost']);
        } elseif (is_array($arg) === true) {
            foreach ($arg as $a) {
                $this->parseFiltersArray($a);
            }
        }
    }


    /**
     * @param components\FilterInterface $filter
     * @param                            $boost
     * @return $this
     */
    public function filter(components\FilterInterface $filter, $boost)
    {
        $this->params['filters'][] = array(
            "filter" => $filter->toArray(),
            'boost' => $boost
        );
        return $this;
    }


    /**
     * @return array
     */
    public function toArray()
    {
        $params = $this->convertParams(
            array(
                'query',
                'filters',
                'score_mode',
                'max_boost',
            )
        );

        $ret = array('custom_filters_score' => $params);

        return $ret;
    }

}
