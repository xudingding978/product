<?php
/**
 * User: Zachary Tong
 * Date: 2013-02-19
 * Time: 08:26 PM
 * Auto-generated by "generate.filters.php"
 * @package Sherlock\components\filters
 */
namespace Sherlock\components\filters;

use Sherlock\components;
use Sherlock\components\FilterInterface;

/**
 * Bool Filter
 * 
 * @method \Sherlock\components\filters\Bool _cache() _cache(\bool $value) Default: false
 */
class Bool extends \Sherlock\components\BaseComponent implements FilterInterface
{
    /**
     * @param null $hashMap Optional assoc array of values to prefill Filter
     */
    public function __construct($hashMap = null)
    {
        $this->params['_cache']   = false;
        $this->params['must']     = array();
        $this->params['must_not'] = array();
        $this->params['should']   = array();

        parent::__construct($hashMap);
    }

    /**
     * Must clause of Bool
     *
     * @param FilterInterface|array $value Single or array of FilterInterface objects
     *
     * @return $this
     */
    public function must($value)
    {
        $args = $this->normalizeFuncArgs(func_get_args());

        foreach ($args as $arg) {
            if ($arg instanceof FilterInterface) {
                $this->params['must'][] = $arg->toArray();
            }
        }

        return $this;
    }


    /**
     * Must_not clause of Bool
     *
     * @param FilterInterface|array $value Single or array of FilterInterface objects
     *
     * @return $this
     */
    public function must_not($value)
    {
        $args = $this->normalizeFuncArgs(func_get_args());

        foreach ($args as $arg) {
            if ($arg instanceof FilterInterface) {
                $this->params['must_not'][] = $arg->toArray();
            }
        }

        return $this;
    }


    /**
     * Should clause of Bool
     *
     * @param FilterInterface|array $value Single or array of FilterInterface objects
     *
     * @return $this
     */
    public function should($value)
    {
        $args = $this->normalizeFuncArgs(func_get_args());

        foreach ($args as $arg) {
            if ($arg instanceof FilterInterface) {
                $this->params['should'][] = $arg->toArray();
            }
        }

        return $this;
    }


    /**
     * @return array
     */
    public function toArray()
    {
        $ret = array(
            'bool' =>
            array(
                'must'     => $this->params["must"],
                'must_not' => $this->params["must_not"],
                'should'   => $this->params["should"],
                '_cache'   => $this->params["_cache"],
            ),
        );

        return $ret;
    }

}
