<?php
/**
 * User: Zachary Tong
 * Date: 2013-02-16
 * Time: 09:24 PM
 * Auto-generated by "generate.php"
 * @package Sherlock\components\queries
 */
namespace Sherlock\components\queries;

use Sherlock\components;
use Sherlock\components\QueryInterface;

/**
 * Class Match
 * @package Sherlock\components\queries
 */
class Match extends components\BaseComponent implements QueryInterface
{
    /**
     * @param string $value
     *
     * @return $this
     */
    public function field($value)
    {
        $this->params['field'] = $value;
        return $this;
    }

    /**
     * @param string $value
     *
     * @return $this
     */
    public function query($value)
    {
        $this->params['query'] = $value;
        return $this;
    }

    /**
     * @param float $value
     *
     * @return $this
     */
    public function boost($value)
    {
        $this->params['boost'] = $value;
        return $this;
    }

    /**
     * @param string $value
     *
     * @return $this
     */
    public function values($value)
    {
        $this->params['values'] = $value;
        return $this;
    }

    /**
     * @param string $value
     *
     * @return $this
     */
    public function operator($value)
    {
        $this->params['operator'] = $value;
        return $this;
    }

    /**
     * @param string $value
     *
     * @return $this
     */
    public function analyzer($value)
    {
        $this->params['analyzer'] = $value;
        return $this;
    }

    /**
     * @param float $value
     *
     * @return $this
     */
    public function fuzziness($value)
    {
        $this->params['fuzziness'] = $value;
        return $this;
    }

    /**
     * @param bool $value
     *
     * @return $this
     */
    public function lenient($value)
    {
        $this->params['lenient'] = $value;
        return $this;
    }

    /**
     * @param int $value
     *
     * @return $this
     */
    public function max_expansions($value)
    {
        $this->params['max_expansions'] = $value;
        return $this;
    }

    /**
     * @param int $value
     *
     * @return $this
     */
    public function minimum_should_match($value)
    {
        $this->params['minimum_should_match'] = $value;
        return $this;
    }

    /**
     * @param string $value
     *
     * @return $this
     */
    public function type($value)
    {
        $this->params['type'] = $value;
        return $this;
    }

    /**
     * @param int $value
     *
     * @return $this
     */
    public function prefix_length($value)
    {
        $this->params['prefix_length'] = $value;
        return $this;
    }


    /**
     * @return array
     */
    public function toArray()
    {
        $params = $this->convertParams(
            array(
                'query',
                'boost',
                'operator',
                'analyzer',
                'fuzziness',
                'lenient',
                'max_expansions',
                'minimum_should_match',
                'prefix_length',
                'type'
            )
        );
        $ret = array(
            'match' =>
            array($this->params["field"] => $params),
        );

        return $ret;
    }

}
